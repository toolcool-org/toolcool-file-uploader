{
  "version": 3,
  "sources": ["../src/core/plugins/plugins-provider.ts", "../src/core/domain/io-provider.ts", "../src/core/domain/validation-provider.ts", "../src/core/ui/uploader.ts", "../src/plugins/image-preview-plugin/image-preview-plugin.ts", "../src/core/settings.ts", "../src/core/index.ts"],
  "sourcesContent": ["import { ISettings } from '../settings';\nimport { IPlugin, IUploadData } from './plugin-declarations';\n\nexport interface IPluginsProvider {\n  init: () => void;\n  upload: (uploadData: IUploadData) => void;\n  destroy: () => void;\n  getPlugins: () => IPlugin[];\n}\n\nconst PluginsProvider = (settings: ISettings) : IPluginsProvider => {\n\n  const plugins: IPlugin[] = [];\n\n  const init = () => {\n    if(!settings.plugins) return;\n\n    for(const pluginFunc of settings.plugins){\n      const plugin = pluginFunc(settings);\n      plugins.push(plugin);\n\n      if(plugin.init && typeof plugin.init === 'function'){\n        plugin.init();\n      }\n    }\n  };\n\n  const upload = (uploadData: IUploadData) => {\n    for(const plugin of plugins){\n      if(plugin.upload && typeof plugin.upload === 'function'){\n        plugin.upload(uploadData);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for(const plugin of plugins){\n      if(plugin.destroy && typeof plugin.destroy === 'function'){\n        plugin.destroy();\n      }\n    }\n  };\n\n  const getPlugins = () => {\n    return plugins;\n  };\n\n  return {\n    init,\n    upload,\n    destroy,\n    getPlugins,\n  };\n};\n\nexport default PluginsProvider;", "export const getExtensionWithoutDot = (fileName: string) => {\n  const ext = fileName.slice((Math.max(0, fileName.lastIndexOf('.')) || Infinity) + 1);\n  return ext.trim().toLowerCase();\n};", "import { ISettings } from '../settings';\nimport { getExtensionWithoutDot } from './io-provider';\nimport { IPlugin } from '../plugins/plugin-declarations';\n\nexport interface IValidationResult {\n  isValid: boolean;\n  message: string;\n}\n\n/**\n * Check if the specified file extension\n * is included in at least one plugin.\n */\nconst extensionIncluded = (ext: string, plugins: IPlugin[]) => {\n\n  for(const plugin of plugins){\n    if(plugin.extensions.includes(ext)) return true;\n  }\n\n  return false;\n};\n\nexport const validate = (settings: ISettings, file: File, plugins: IPlugin[]) : IValidationResult => {\n  if(!settings.validationEnabled) return {\n    isValid: true,\n    message: '',\n  };\n\n  let isValid = true;\n  let message = '';\n\n  // validate file extension ---------------\n  if(isValid){\n    const ext = getExtensionWithoutDot(file.name);\n    if(!extensionIncluded(ext, plugins)){\n      return {\n        isValid: false,\n        message: `The '.${ ext }' file extension is not supported.`,\n      };\n    }\n  }\n\n  return {\n    isValid,\n    message,\n  };\n};", "import PluginsProvider, { IPluginsProvider } from '../plugins/plugins-provider';\nimport { ISettings } from '../settings';\nimport { validate } from '../domain/validation-provider';\n\nexport interface IUploader {\n  destroy: () => void;\n}\n\nconst DRAG_CLASS = 'is-dragover';\n\nconst Uploader = ($uploader: HTMLElement, settings: ISettings) : IUploader => {\n  let pluginsProvider: IPluginsProvider | null = null;\n\n  const $uploadPanel = $uploader.querySelector('[data-tc=\"upload-panel\"]') as HTMLElement;\n  const $fileInput = $uploadPanel?.querySelector('input[type=\"file\"]');\n\n  const prevent = (evt: MouseEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n  };\n\n  const removeDragClass = (evt: DragEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    $uploadPanel?.classList.remove(DRAG_CLASS);\n  };\n\n  const addDragClass = (evt: DragEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    $uploadPanel?.classList.add(DRAG_CLASS);\n  };\n\n  const handleDrop = async (evt: DragEvent) => {\n    removeDragClass(evt);\n\n    if(!evt || !evt.dataTransfer || !evt.dataTransfer.files || evt.dataTransfer.files.length < 0) return;\n\n    const file: File = evt.dataTransfer.files[0];\n    await upload(file);\n  };\n\n  const upload = async (file: File) => {\n\n    // perform validations ----------------\n    const validationResult = validate(settings, file, pluginsProvider?.getPlugins() ?? []);\n    if(!validationResult.isValid){\n      alert(validationResult.message);\n      return;\n    }\n\n    pluginsProvider?.upload({\n      file,\n      $uploader,\n      $uploadPanel,\n    });\n\n    /*\n    if (!file.type.match('image.*')) {\n      // https://fkhadra.github.io/react-toastify/introduction/\n      toast('\u26A0\uFE0F Only image files are supported.');\n      return;\n    }\n\n    const img = await loadImage(file);\n    */\n  };\n\n  const onFileInputChange = async (evt: MouseEvent) => {\n    const $target = evt.target as HTMLInputElement;\n    if(!$target.files || $target.files.length <= 0) return;\n\n    const file: File = $target.files[0];\n    await upload(file);\n  };\n\n  (() => {\n    pluginsProvider = PluginsProvider(settings);\n    pluginsProvider.init();\n\n    $fileInput?.addEventListener('change', onFileInputChange);\n    $uploadPanel?.addEventListener('drag', prevent);\n    $uploadPanel?.addEventListener('dragstart', prevent);\n    $uploadPanel?.addEventListener('dragend', removeDragClass);\n    $uploadPanel?.addEventListener('dragleave', removeDragClass);\n    $uploadPanel?.addEventListener('dragover', addDragClass);\n    $uploadPanel?.addEventListener('dragenter', addDragClass);\n    $uploadPanel?.addEventListener('drop', handleDrop);\n  })();\n\n  const destroy = () => {\n    $fileInput?.removeEventListener('change', onFileInputChange);\n    $uploadPanel?.removeEventListener('drag', prevent);\n    $uploadPanel?.removeEventListener('dragstart', prevent);\n    $uploadPanel?.removeEventListener('dragend', removeDragClass);\n    $uploadPanel?.removeEventListener('dragleave', removeDragClass);\n    $uploadPanel?.removeEventListener('dragover', addDragClass);\n    $uploadPanel?.removeEventListener('dragenter', addDragClass);\n    $uploadPanel?.removeEventListener('drop', handleDrop);\n\n    pluginsProvider?.destroy();\n  };\n\n  return {\n    destroy,\n  };\n};\n\nexport default Uploader;", "import { IPlugin, IUploadData } from '../../core/plugins/plugin-declarations';\nimport './styles.css';\nimport { ISettings } from '../../core/settings';\nimport { getExtensionWithoutDot } from '../../core/domain/io-provider';\n\nexport interface ILoadedImage {\n  $image: HTMLImageElement;\n  width: number;\n  height: number;\n}\n\nconst loadImage = (file: File) => {\n  return new Promise<ILoadedImage>((resolve, reject) => {\n    const $image = new Image();\n\n    $image.crossOrigin = 'Anonymous';\n    $image.onerror = (err) => reject(err);\n\n    $image.onload = (evt) => {\n      const { width, height } = evt.target as HTMLImageElement;\n      resolve({\n        $image,\n        width,\n        height,\n      });\n    };\n\n    const reader = new FileReader();\n    reader.onerror = (err) => reject(err);\n    reader.onload = () => {\n      $image.src = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * This plugin displays standard image formats in the preview panel.\n * This plugin is part of the core system.\n */\nconst ImagePreviewPlugin = (_settings: ISettings) : IPlugin => {\n\n  let uploadData: IUploadData | undefined = undefined;\n  let img: ILoadedImage | undefined = undefined;\n  let $previewPanel: HTMLElement | undefined = undefined;\n  let $cancelButton: HTMLElement | undefined = undefined;\n  let $uploadBtn: HTMLElement | undefined = undefined;\n\n  const cancel = () => {\n    if(!uploadData) return;\n\n    uploadData.$uploadPanel?.classList.remove('hidden');\n    $previewPanel?.classList.add('hidden');\n\n    img?.$image.remove();\n    img = undefined;\n  };\n\n  const upload = () => {\n    if(!uploadData) return;\n\n    if(_settings.uploadCallback && typeof _settings.uploadCallback === 'function'){\n      _settings.uploadCallback({\n        file: uploadData.file,\n        ext: getExtensionWithoutDot(uploadData.file?.name ?? ''),\n      });\n    }\n  };\n\n  return {\n    extensions: ['jpg', 'jpeg', 'png', 'gif'],\n\n    upload: async (_uploadData: IUploadData) => {\n      uploadData = _uploadData;\n      $previewPanel = uploadData.$uploader.querySelector('[data-tc=\"preview-panel\"]') as HTMLElement;\n      if(!$previewPanel) return;\n\n      uploadData.$uploadPanel?.classList.add('hidden');\n      $previewPanel?.classList.remove('hidden');\n\n      img = await loadImage(uploadData.file);\n\n      const $preview = $previewPanel.querySelector('[data-tc=\"preview\"]') as HTMLElement;\n      $preview?.append(img.$image);\n\n      if(_settings.previewCallback && typeof _settings.previewCallback === 'function'){\n        _settings.previewCallback({\n          file: _uploadData.file,\n          ext: getExtensionWithoutDot(_uploadData.file?.name ?? ''),\n        });\n      }\n\n      $cancelButton = $previewPanel.querySelector('[data-tc=\"cancel-preview-btn\"]') as HTMLElement;\n      $cancelButton?.addEventListener('click', cancel);\n\n      $uploadBtn = $previewPanel.querySelector('[data-tc=\"upload-btn\"]') as HTMLElement;\n      $uploadBtn?.addEventListener('click', upload);\n    },\n\n    destroy: () => {\n      try{\n        img?.$image?.remove();\n      }\n      catch(ex){\n        // error\n      }\n\n      $cancelButton?.removeEventListener('click', cancel);\n      $uploadBtn?.removeEventListener('click', upload);\n\n      uploadData = undefined;\n      img = undefined;\n      $previewPanel = undefined;\n      $cancelButton = undefined;\n      $uploadBtn = undefined;\n    },\n  };\n};\n\nexport default ImagePreviewPlugin;", "import { IPlugin } from './plugins/plugin-declarations';\nimport ImagePreviewPlugin from '../plugins/image-preview-plugin/image-preview-plugin';\n\nexport interface IPreviewCallbackData {\n  file: File;\n  ext: string;\n}\n\nexport interface IUploadCallbackData {\n  file: File;\n  ext: string;\n}\n\nexport interface ISettings {\n  path: string,\n  plugins?: ((settings: ISettings) => IPlugin)[];\n  uploadCallback?: (data: IUploadCallbackData) => void;\n  previewCallback?: (data: IPreviewCallbackData) => void;\n  validationEnabled?: boolean;\n}\n\nexport const settings : ISettings = {\n  path: '',\n  plugins: [ImagePreviewPlugin],\n  validationEnabled: true,\n};", "import './css/styles.css';\nimport Uploader, { IUploader } from './ui/uploader';\nimport { settings, ISettings } from './settings';\n\nexport interface IToolCoolFileUploader {\n  destroy: () => void;\n}\n\nconst ToolCoolFileUploader = (userSettings?: ISettings) : IToolCoolFileUploader => {\n\n  let uploader: IUploader | undefined = undefined;\n  let $uploader: HTMLElement | undefined = undefined;\n\n  const init = (userSettings?: ISettings) => {\n    const combinedSettings = Object.assign(settings, userSettings);\n\n    $uploader = document.querySelector(combinedSettings.path) as HTMLElement;\n    if(!$uploader){\n      console.error(`File uploader error: the path property is not defined.`);\n      return;\n    }\n\n    uploader = Uploader($uploader, combinedSettings);\n  };\n\n  const destroy = () => {\n    uploader?.destroy();\n\n    uploader = undefined;\n    $uploader = undefined;\n  };\n\n  init(userSettings);\n\n  return {\n    destroy,\n  };\n};\n\nexport default ToolCoolFileUploader;\n\nwindow.tcFileUploader = ToolCoolFileUploader;"],
  "mappings": "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",
  "names": ["PluginsProvider", "settings", "plugins", "pluginFunc", "plugin", "uploadData", "plugins_provider_default", "getExtensionWithoutDot", "fileName", "extensionIncluded", "ext", "plugins", "plugin", "validate", "settings", "file", "isValid", "message", "getExtensionWithoutDot", "DRAG_CLASS", "Uploader", "$uploader", "settings", "pluginsProvider", "$uploadPanel", "$fileInput", "prevent", "evt", "removeDragClass", "addDragClass", "handleDrop", "__async", "file", "upload", "_a", "validationResult", "validate", "onFileInputChange", "$target", "plugins_provider_default", "uploader_default", "loadImage", "file", "resolve", "reject", "$image", "err", "evt", "width", "height", "reader", "ImagePreviewPlugin", "_settings", "uploadData", "img", "$previewPanel", "$cancelButton", "$uploadBtn", "cancel", "_a", "upload", "_b", "getExtensionWithoutDot", "_uploadData", "__async", "_c", "$preview", "ex", "image_preview_plugin_default", "settings", "image_preview_plugin_default", "ToolCoolFileUploader", "userSettings", "uploader", "$uploader", "init", "combinedSettings", "settings", "uploader_default", "destroy", "core_default"]
}
