{
  "version": 3,
  "sources": ["../src/core/plugins/plugins-provider.ts", "../src/core/ui/uploader.ts", "../src/plugins/image-preview-plugin/image-preview-plugin.ts", "../src/core/settings.ts", "../src/core/index.ts"],
  "sourcesContent": ["import { ISettings } from '../settings';\nimport { IPlugin, IUploadData } from './plugin-declarations';\n\nexport interface IPluginsProvider {\n  init: () => void;\n  upload: (uploadData: IUploadData) => void;\n  destroy: () => void;\n}\n\nconst PluginsProvider = (settings: ISettings) : IPluginsProvider => {\n\n  const plugins: IPlugin[] = [];\n\n  const init = () => {\n    if(!settings.plugins) return;\n\n    for(const pluginFunc of settings.plugins){\n      const plugin = pluginFunc();\n      plugins.push(plugin);\n\n      if(plugin.init && typeof plugin.init === 'function'){\n        plugin.init();\n      }\n    }\n  };\n\n  const upload = (uploadData: IUploadData) => {\n    for(const plugin of plugins){\n      if(plugin.upload && typeof plugin.upload === 'function'){\n        plugin.upload(uploadData);\n      }\n    }\n  };\n\n  const destroy = () => {\n    for(const plugin of plugins){\n      if(plugin.destroy && typeof plugin.destroy === 'function'){\n        plugin.destroy();\n      }\n    }\n  };\n\n  return {\n    init,\n    upload,\n    destroy,\n  };\n};\n\nexport default PluginsProvider;", "import PluginsProvider, { IPluginsProvider } from '../plugins/plugins-provider';\nimport { ISettings } from '../settings';\n\nexport interface IUploader {\n  destroy: () => void;\n}\n\nconst DRAG_CLASS = 'is-dragover';\n\nconst Uploader = ($uploader: HTMLElement, settings: ISettings) : IUploader => {\n  let pluginsProvider: IPluginsProvider | null = null;\n\n  const $uploadPanel = $uploader.querySelector('[data-tc=\"upload-panel\"]') as HTMLElement;\n  const $fileInput = $uploadPanel?.querySelector('input[type=\"file\"]');\n\n  const prevent = (evt: MouseEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n  };\n\n  const removeDragClass = (evt: DragEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    $uploadPanel?.classList.remove(DRAG_CLASS);\n  };\n\n  const addDragClass = (evt: DragEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    $uploadPanel?.classList.add(DRAG_CLASS);\n  };\n\n  const handleDrop = async (evt: DragEvent) => {\n    removeDragClass(evt);\n\n    if(!evt || !evt.dataTransfer || !evt.dataTransfer.files || evt.dataTransfer.files.length < 0) return;\n\n    const file: File = evt.dataTransfer.files[0];\n    await upload(file);\n  };\n\n  const upload = async (file: File) => {\n\n    pluginsProvider?.upload({\n      file,\n      $uploader,\n      $uploadPanel,\n    });\n\n    /*\n    if (!file.type.match('image.*')) {\n      // https://fkhadra.github.io/react-toastify/introduction/\n      toast('\u26A0\uFE0F Only image files are supported.');\n      return;\n    }\n\n    const img = await loadImage(file);\n    */\n  };\n\n  const onFileInputChange = async (evt: MouseEvent) => {\n    const $target = evt.target as HTMLInputElement;\n    if(!$target.files || $target.files.length <= 0) return;\n\n    const file: File = $target.files[0];\n    await upload(file);\n  };\n\n  (() => {\n    pluginsProvider = PluginsProvider(settings);\n    pluginsProvider.init();\n\n    $fileInput?.addEventListener('change', onFileInputChange);\n    $uploadPanel?.addEventListener('drag', prevent);\n    $uploadPanel?.addEventListener('dragstart', prevent);\n    $uploadPanel?.addEventListener('dragend', removeDragClass);\n    $uploadPanel?.addEventListener('dragleave', removeDragClass);\n    $uploadPanel?.addEventListener('dragover', addDragClass);\n    $uploadPanel?.addEventListener('dragenter', addDragClass);\n    $uploadPanel?.addEventListener('drop', handleDrop);\n  })();\n\n  const destroy = () => {\n    $fileInput?.removeEventListener('change', onFileInputChange);\n    $uploadPanel?.removeEventListener('drag', prevent);\n    $uploadPanel?.removeEventListener('dragstart', prevent);\n    $uploadPanel?.removeEventListener('dragend', removeDragClass);\n    $uploadPanel?.removeEventListener('dragleave', removeDragClass);\n    $uploadPanel?.removeEventListener('dragover', addDragClass);\n    $uploadPanel?.removeEventListener('dragenter', addDragClass);\n    $uploadPanel?.removeEventListener('drop', handleDrop);\n\n    pluginsProvider?.destroy();\n  };\n\n  return {\n    destroy,\n  };\n};\n\nexport default Uploader;", "import { IPlugin, IUploadData } from '../../core/plugins/plugin-declarations';\nimport './styles.css';\n\nexport interface ILoadedImage {\n  $image: HTMLImageElement;\n  width: number;\n  height: number;\n}\n\nconst loadImage = (file: File) => {\n  return new Promise<ILoadedImage>((resolve, reject) => {\n    const $image = new Image();\n\n    $image.crossOrigin = 'Anonymous';\n    $image.onerror = (err) => reject(err);\n\n    $image.onload = (evt) => {\n      const { width, height } = evt.target as HTMLImageElement;\n      resolve({\n        $image,\n        width,\n        height,\n      });\n    };\n\n    const reader = new FileReader();\n    reader.onerror = (err) => reject(err);\n    reader.onload = () => {\n      $image.src = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\n * This plugin displays standard image formats in the preview panel.\n * This plugin is part of the core system.\n */\nconst ImagePreviewPlugin = () : IPlugin => {\n\n  let uploadData: IUploadData | undefined = undefined;\n  let img: ILoadedImage | undefined = undefined;\n  let $previewPanel: HTMLElement | undefined = undefined;\n  let $cancelButton: HTMLElement | undefined = undefined;\n\n  const cancel = () => {\n    if(!uploadData) return;\n\n    uploadData.$uploadPanel?.classList.remove('hidden');\n    $previewPanel?.classList.add('hidden');\n\n    img?.$image.remove();\n    img = undefined;\n  };\n\n  return {\n    extensions: ['jpg', 'jpeg', 'png', 'gif'],\n\n    upload: async (_uploadData: IUploadData) => {\n      uploadData = _uploadData;\n      $previewPanel = uploadData.$uploader.querySelector('[data-tc=\"preview-panel\"]') as HTMLElement;\n      if(!$previewPanel) return;\n\n      uploadData.$uploadPanel?.classList.add('hidden');\n      $previewPanel?.classList.remove('hidden');\n\n      img = await loadImage(uploadData.file);\n\n      const $preview = $previewPanel.querySelector('[data-tc=\"preview\"]') as HTMLElement;\n      $preview?.append(img.$image);\n\n      $cancelButton = $previewPanel.querySelector('[data-tc=\"cancel-preview\"]') as HTMLElement;\n      $cancelButton?.addEventListener('click', cancel);\n    },\n\n    destroy: () => {\n      try{\n        img?.$image?.remove();\n      }\n      catch(ex){\n        // error\n      }\n\n      $cancelButton?.removeEventListener('click', cancel);\n\n      uploadData = undefined;\n      img = undefined;\n      $previewPanel = undefined;\n      $cancelButton = undefined;\n    },\n  };\n};\n\nexport default ImagePreviewPlugin;", "import { IPlugin } from './plugins/plugin-declarations';\nimport ImagePreviewPlugin from '../plugins/image-preview-plugin/image-preview-plugin';\n\nexport interface ISettings {\n  path: string,\n  plugins?: (() => IPlugin)[];\n}\n\nexport const settings : ISettings = {\n  path: '',\n  plugins: [ImagePreviewPlugin],\n};", "import './css/styles.css';\nimport Uploader, { IUploader } from './ui/uploader';\nimport { settings, ISettings } from './settings';\n\nexport interface IToolCoolFileUploader {\n  destroy: () => void;\n}\n\nconst ToolCoolFileUploader = (userSettings?: ISettings) : IToolCoolFileUploader => {\n\n  let uploader: IUploader | undefined = undefined;\n  let $uploader: HTMLElement | undefined = undefined;\n\n  const init = (userSettings?: ISettings) => {\n    const combinedSettings = Object.assign(settings, userSettings);\n\n    $uploader = document.querySelector(combinedSettings.path) as HTMLElement;\n    if(!$uploader){\n      console.error(`File uploader error: the path property is not defined.`);\n      return;\n    }\n\n    uploader = Uploader($uploader, combinedSettings);\n  };\n\n  const destroy = () => {\n    uploader?.destroy();\n\n    uploader = undefined;\n    $uploader = undefined;\n  };\n\n  init(userSettings);\n\n  return {\n    destroy,\n  };\n};\n\nexport default ToolCoolFileUploader;\n\nwindow.tcFileUploader = ToolCoolFileUploader;"],
  "mappings": "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",
  "names": ["PluginsProvider", "settings", "plugins", "pluginFunc", "plugin", "uploadData", "plugins_provider_default", "DRAG_CLASS", "Uploader", "$uploader", "settings", "pluginsProvider", "$uploadPanel", "$fileInput", "prevent", "evt", "removeDragClass", "addDragClass", "handleDrop", "__async", "file", "upload", "onFileInputChange", "$target", "plugins_provider_default", "uploader_default", "loadImage", "file", "resolve", "reject", "$image", "err", "evt", "width", "height", "reader", "ImagePreviewPlugin", "uploadData", "img", "$previewPanel", "$cancelButton", "cancel", "_a", "_uploadData", "__async", "$preview", "ex", "image_preview_plugin_default", "settings", "image_preview_plugin_default", "ToolCoolFileUploader", "userSettings", "uploader", "$uploader", "init", "combinedSettings", "settings", "uploader_default", "destroy", "core_default"]
}
